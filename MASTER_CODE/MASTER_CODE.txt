//MASTER Code
#include "DHT.h"
#include "masterSetup.h"
#include <SoftwareSerial.h>

DHT dht;
SoftwareSerial mySerial = SoftwareSerial(rx, tx);

//-----------------------------------------------
// VARIABLE PARAMETERS - CHANGE ON FLY
//-----------------------------------------------
  // UNIVERSAL DELAY BETWEEN READINGS
     int del = 2000;
  // TARGET O2% TO DO REFILL
     float targetHigh = 2.5;
  // TARGET O2% TO STOP REFILL
     float targetLow = 1.5;
     
void setup(){
  Serial.begin(9600);
  mySerial.begin(115200);
//-----------------------------------------------
// FOR LOOP ITERATIONS FOR PINMODE AND OUTPUT
//-----------------------------------------------
  for (int i = 0; i < 9; i++){
    pinMode(sv[i], OUTPUT);
    delay(100);
  }
  for (int i = 0; i < 9; i++){
    digitalWrite(sv[i], HIGH);
    delay(100);
  }
}
//-------------------------------------------------
// MAIN LOOP
//-------------------------------------------------
void loop(){
  String myStringA;
  String myStringB;
  String myStringC;
  int A = 0;
  int B = 0;
  int C = 0;
//--------------------------------------------------
// CONTAINER #1 CODE
//--------------------------------------------------
  delay(del);
  osCon = doReadings(1 , OS1 , VRef1 , DHTPIN1);
    delay(100);
  if (osCon > targetHigh){
    doRefill(osCon , OS1 , VRef1 , sv[0] , sv[1]);
      delay(1000);
    osCon = doReadings(1 , OS1 , VRef1 , DHTPIN1);
  }
  delay(del);
//--------------------------------------------------
// CONTAINER #2 CODE
//--------------------------------------------------
  osCon = doReadings(2 , OS2 , VRef2 , DHTPIN2);
    delay(100);
  if (osCon > targetHigh){
    doRefill(osCon , OS2 , VRef2 , sv[0] , sv[2]);
      delay(1000);
    osCon = doReadings(2 , OS2 , VRef2 , DHTPIN2);
  }
  delay(del);
//--------------------------------------------------
// CONTAINER #3 CODE
//--------------------------------------------------
  osCon = doReadings(3 , OS3 , VRef3 , DHTPIN3);
    delay(100);
  if (osCon > targetHigh){
    doRefill(osCon , OS3 , VRef3 , sv[0] , sv[3]);
      delay(1000);
    osCon = doReadings(3 , OS3 , VRef3 , DHTPIN3);
  }
    delay(del);
//--------------------------------------------------
// CONTAINER #4 CODE
//--------------------------------------------------
  osCon = doReadings(4 , OS4 , VRef4 , DHTPIN4);
    delay(100);
  if (osCon > targetHigh) {
    doRefill(osCon , OS4 , VRef4 , sv[0] , sv[4]);
      delay(1000);
    osCon = doReadings(4 , OS4 , VRef4 , DHTPIN4);
  }
  delay(del);
//--------------------------------------------------
// CONTAINER #5 CODE
//--------------------------------------------------
  osCon = doReadings(5 , OS5 , VRef5 , DHTPIN5);
    delay(100);
  if (osCon > targetHigh) {
    doRefill(osCon , OS5 , VRef5 , sv[0] , sv[5]);
      delay(1000);
    osCon = doReadings(5 , OS5 , VRef5 , DHTPIN5);
  }
  delay(del);
//--------------------------------------------------
// CONTAINER #6 CODE
//--------------------------------------------------
  osCon = doReadings(6 , OS6 , VRef6 , DHTPIN6);
    delay(100);
  if (osCon > targetHigh) {
    doRefill(osCon , OS6 , VRef6 , sv[0] , sv[6]);
      delay(1000);
    osCon = doReadings(6 , OS6 , VRef6 , DHTPIN6);
  }
  delay(del);
//--------------------------------------------------
// CONTAINER #7 CODE
//--------------------------------------------------
  osCon = doReadings(7 , OS7 , VRef7 , DHTPIN7);
    delay(100);
  if (osCon > targetHigh) {
    doRefill(osCon , OS7 , VRef7 , sv[0] , sv[7]);
      delay(1000);
    osCon = doReadings(7 , OS7 , VRef7 , DHTPIN7);
  }
  delay(del);
//--------------------------------------------------
// CONTAINER #8 CODE
//--------------------------------------------------
  osCon = doReadings(8 , OS8 , VRef8 , DHTPIN8);
    delay(100);
  if (osCon > targetHigh) {
    doRefill(osCon , OS8 , VRef8 , sv[0] , sv[8]);
      delay(1000);
    osCon = doReadings(8 , OS8 , VRef8 , DHTPIN8);
  }
  delay(del);
//--------------------------------------------------
// SLAVE CONTAINERS/FRIDGE CODE #1
//--------------------------------------------------
  if(A == 0) {
    primeSerialPort();
      delay(100);
    mySerial.print(one);
      delay(3000);
    while (mySerial.available() > 0) {
      character = mySerial.read();
      if (character == 'Q') {
        Serial.println(myStringA);
        continue;
      } else {
        myStringA += character;
      }
    }
    A = 1;
  }
  delay(del);
//--------------------------------------------------
// SLAVE CONTAINERS/FRIDGE CODE #2
//--------------------------------------------------
   if(B == 0){
     primeSerialPort();
       delay(100);
     mySerial.print(two);
       delay(3000);
     while(mySerial.available() > 0){
       character = mySerial.read();
       if(character == 'Q'){
         Serial.println(myStringB);
         continue;
       }else{
         myStringB += character;
       }
     }
    B = 1;
   }
   delay(del);
//--------------------------------------------------
// SLAVE CONTAINERS/FRIDGE CODE #3
//--------------------------------------------------
   if(C == 0){
     primeSerialPort();
       delay(100);
     mySerial.print(three);
       delay(3000);
     while(mySerial.available() > 0){
       character = mySerial.read();
       if(character == 'Q'){
         Serial.println(myStringC);
         continue;
       }else{
         myStringC += character;
       }
     }
    C = 1;
   }
   delay(del);
//--------------------------------------------------
// CLEAR SW SERIAL FOR NEXT ITERATION 
//--------------------------------------------------
   primeSerialPort();
    delay(100);
   mySerial.print(zero);
    delay(100);
   primeSerialPort();
    delay(100);
}
//--------------------------------------------------
// END LOOP  ---  START METHODS
//--------------------------------------------------

//--------------------------------------------------
// DO READINGS METHOD, DOES ALL READINGS AND PRINTS 
// DATA LINES IN CSV FOR EXCEL DAQ
//--------------------------------------------------
  float doReadings(uint8_t contain, uint8_t OS, uint8_t VRef, uint8_t dhtpin) {
    dht.setup(dhtpin);
      delay(100);
    Serial.print("DATA,TIME,DATE,");
      delay(100);
    Serial.print(contain);
    Serial.print(",");
      delay(100);
    float osCon = (readConcentration(OS, VRef));
      delay(100);
    Serial.print(osCon);
    Serial.print(",");
      delay(dht.getMinimumSamplingPeriod());
    Serial.print(dht.getTemperature());
    Serial.print(",");
      delay(dht.getMinimumSamplingPeriod());
    Serial.print(dht.getHumidity());
    Serial.print(",");
      delay(100);
    if (osCon > targetHigh) {
      Serial.println("1");
    } else {
      Serial.println("0");
    }
    delay(100);
    return osCon;
  }
//--------------------------------------------------
// REFILL METHOD IF CONTAINER IS OVER TARGET O2%
//--------------------------------------------------
  void doRefill(uint8_t osCon , uint8_t OS , uint8_t VRef , uint8_t sv1 , uint8_t sv2) {
    digitalWrite(sv1, LOW);
      delay(100);
    digitalWrite(sv2, LOW);
      delay(100);
    do {
      osCon = (readConcentration(OS, VRef));
      delay(1500);
    } while (osCon > targetLow);   
      delay(100);
    digitalWrite(sv1, HIGH);
      delay(100);
    digitalWrite(sv2, HIGH);
      delay(100);
    return;
  }
//--------------------------------------------------
// READ VOLTAGE OF O2 SENSORS METHOD
//--------------------------------------------------
  float readO2Vout(uint8_t analogpin, uint8_t VRefer) {
    long sum = 0;
    for (int i = 0; i < 32; i++) {
      sum += analogRead(analogpin);
    }
    sum >>= 5;
    float MeasuredVout = sum * (VRefer / 1023.0);
    return MeasuredVout;
  }
//--------------------------------------------------
// READS O2 CONCENTRATION FROM SENSOR VOLTAGE
//--------------------------------------------------
  float readConcentration(uint8_t analogpin, uint8_t VRefer) {
    float MeasuredVout = readO2Vout(analogpin, VRefer);
    float Concentration = MeasuredVout * 0.21 / 2.0;
    float Concentration_Percentage = Concentration * 100;
    return Concentration_Percentage;
  }
//--------------------------------------------------
// CLEARS SERIAL PORT DATA - COLLECTS/CLEARS GARBAGE 
//--------------------------------------------------
  void primeSerialPort(){
    digitalWrite(rx, HIGH);
    digitalWrite(tx, HIGH);
    mySerial.listen();
    mySerial.flush();
  }